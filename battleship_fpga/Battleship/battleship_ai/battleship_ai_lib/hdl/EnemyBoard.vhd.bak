-- Katie Pucci
-- ECE1120:: Battleship AI
-- GameBoard

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;

LIBRARY battleship_ai_lib;
USE battleship_ai_lib.BattleshipTypes.ALL;

-- NOTE: Another option for loading game piece configs is to give the first
--       space num and then the direction. Then, when the space is in the 
--       setup config, it'll propagate the signal through to the rest of the
--       pieces. Consider this if the IO utilization is too high.
--
--       Can also consider not having an actual component for the game space
--       and use a matrix instead.

ENTITY EnemyBoard IS
  PORT (
    Turn       : IN STD_LOGIC;
    Reset      : IN STD_LOGIC;
    Won        : IN STD_LOGIC := '0';
    Fire       : OUT STATE;
    Lost       : OUT STD_LOGIC := '0';
    Location   : OUT ADDR;
  );
END ENTITY EnemyBoard;

ARCHITECTURE behavior OF EnemyBoard IS
  -- 10 x 10 gameboard
  TYPE STATE_ARRAY IS ARRAY (0 TO 99) OF STATE;
  SIGNAL space_states : STATE_ARRAY;
  
  TYPE TYPE_ARRAY IS ARRAY (0 TO 99) OF SPACE_TYPE;
  SIGNAL space_types : TYPE_ARRAY;
  
  SIGNAL D  : DESTROYER_SPACES;
  SIGNAL S1 : SUBMARINE_SPACES;
  SIGNAL S2 : SUBMARINE_SPACES;
  SIGNAL CR : CRUISER_SPACES;
  SIGNAL B  : BATTLESHIP_SPACES;
  SIGNAL CA : CARRIER_SPACES;
  
  SIGNAL ship_buffer : SPACE_BUFFER;
  
  SIGNAL destroyer_count : INTEGER := 2;
  SIGNAL submarine1_count : INTEGER := 3;
  SIGNAL submarine2_count : INTEGER := 3;
  SIGNAL cruiser_count : INTEGER := 3;
  SIGNAL battleship_count : INTEGER := 4;
  SIGNAL carrier_count : INTEGER := 5;
BEGIN
  
  PROCESS(Turn, Fired, Sunken, Reset, Initialize)
  BEGIN
    -- Restart game
    IF Reset = '1' THEN
      -- Set all states to free
      board_loop : FOR s IN 0 TO 99 LOOP
        space_states(s) <= FREE;
      END LOOP board_loop;
      
      destroyer_count <= 1;
      submarine1_count <= 2;
      submarine2_count <= 2;
      cruiser_count <= 2;
      battleship_count <= 3;
      carrier_count <= 4;
    
    ELSIF Won = '0' THEN
      -- Other player indicated a sunken ship
      IF Sunken = '1' THEN
        space_states(ADDR'POS(Location)) <= SUNK;
      
      -- Other player fired a shot at this piece
      ELSIF Fired = '1' THEN
        IF space_states(ADDR'POS(Location)) = FREE THEN
          CASE space_types(ADDR'POS(Location)) IS
            WHEN VACANT =>
              space_states(ADDR'POS(Location)) <= MISS;
              Result <= MISS;
              
            WHEN DESTROYER =>
              IF destroyer_count = 0 THEN  
                Result <= SUNK;
                sink_destroyer : FOR i IN 0 TO 1 LOOP
                  space_states(ADDR'POS(D(i))) <= SUNK;
                END LOOP;
              ELSE
                destroyer_count <= destroyer_count - 1;
                space_states(ADDR'POS(Location)) <= HIT;
                Result <= HIT;
              END IF;
              
            WHEN SUBMARINE1 =>
              IF submarine1_count = 0 THEN  
                Result <= SUNK;
                sink_sub1 : FOR i IN 0 TO 2 LOOP
                  space_states(ADDR'POS(S1(i))) <= SUNK;
                END LOOP;
              ELSE
                submarine1_count <= submarine1_count - 1;
                space_states(ADDR'POS(Location)) <= HIT;
                Result <= HIT;
              END IF;
              
            WHEN SUBMARINE2 =>
              IF submarine2_count = 0 THEN  
                Result <= SUNK;
                sink_sub2 : FOR i IN 0 TO 2 LOOP
                  space_states(ADDR'POS(S2(i))) <= SUNK;
                END LOOP;
              ELSE
                submarine2_count <= submarine2_count - 1;
                space_states(ADDR'POS(Location)) <= HIT;
                Result <= HIT;
              END IF;
              
            WHEN CRUISER =>
              IF cruiser_count = 0 THEN  
                Result <= SUNK;
                sink_cruiser : FOR i IN 0 TO 2 LOOP
                  space_states(ADDR'POS(CR(i))) <= SUNK;
                END LOOP;
              ELSE
                cruiser_count <= cruiser_count - 1;
                space_states(ADDR'POS(Location)) <= HIT;
                Result <= HIT;
              END IF;
          
            WHEN BATTLESHIP =>
              IF battleship_count = 0 THEN  
                Result <= SUNK;
                sink_battleship : FOR i IN 0 TO 2 LOOP
                  space_states(ADDR'POS(B(i))) <= SUNK;
                END LOOP;
              ELSE
                battleship_count <= battleship_count - 1;
                space_states(ADDR'POS(Location)) <= HIT;
                Result <= HIT;
              END IF;
              
            WHEN CARRIER =>
              IF carrier_count = 0 THEN  
                Result <= SUNK;
                sink_carrier : FOR i IN 0 TO 2 LOOP
                  space_states(ADDR'POS(CA(i))) <= SUNK;
                END LOOP;
              ELSE
                carrier_count <= carrier_count - 1;
                space_states(ADDR'POS(Location)) <= HIT;
                Result <= HIT;
              END IF;
              
          END CASE;
        END IF;
          
        -- NOTE: Don't need to do anything for other states
      END IF;
      
      -- Check if you lost
      IF destroyer_count = 0 AND submarine1_count = 0 AND submarine2_count = 0 AND
         cruiser_count = 0 AND battleship_count = 0 AND carrier_count = 0 THEN
             Lost <= '1';
      END IF;
    END IF;
  END PROCESS;
  
END ARCHITECTURE behavior;

